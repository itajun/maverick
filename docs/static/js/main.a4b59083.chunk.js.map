{"version":3,"sources":["processors/index.js","components/drawer/FileList.jsx","components/drawer/dropzone/FileProcessorProgressTracker.jsx","components/drawer/dropzone/FileProgress.jsx","components/drawer/dropzone/FileDropZone.jsx","components/drawer/IndexSelector.jsx","components/drawer/Drawer.jsx","components/logviewer/LineList.jsx","components/logviewer/EntryFinder.jsx","components/Layout.jsx","stores/elastic/index.js","App.js","reportWebVitals.js","index.js"],"names":["LOG_ENTRY_REGEX_NUIX","LOG_ENTRY_REGEX_ES","LOG_ENTRY_REGEX_GENERIC","STACK_TRACE_REGEX","LoadFileToESProcessor","esStore","indexName","file","progressCallback","completionCallback","_this","this","esBatchSize","arguments","length","undefined","Object","classCallCheck","matchesNewEntry","line","matcher","match","result","matcherName","console","info","handleOnLoad","reader","asyncToGenerator","_regeneratorRuntime","mark","_callee","fileGuid","fileName","lines","timestamp","logLevel","lineNumber","docId","newLineDoc","newEntry","content","wrap","_context","prev","next","split","cancelled","warn","abrupt","concat","fileguid","filename","type","linenumber","trim","updateCurrentEntryAndStartNew","entryFlags","push","Date","toISOString","entryContent","entryDocIds","includes","addIndexOperation","currentBatch","flush","reportProgress","finish","stop","progress","uuidv4","name","entryGuid","logEntriesAdded","createClass","key","value","processCalled","debug","size","FileReader","onload","readAsText","_flush","_callee2","_context2","postToIndex","Promise","r","setTimeout","apply","_this2","entryMD5","MD5","join","toString","forEach","e","addUpdateOperation","doc","entryfirstline","entrymd5","flags","id","o","JSON","stringify","index","_index","_id","update","FileListRenderer","_ref","files","selectedFiles","toggleFile","renameFile","_useState","useState","_useState2","slicedToArray","editing","setEditing","textBoxRef","useRef","handleEdit","guid","useEffect","current","focus","select","react_default","a","createElement","Box","sx","display","flexDirection","flex","overflowY","List","map","_ref2","_ref3","ListItem","p","Checkbox","checked","onChange","TextField","defaultValue","onBlur","evt","target","inputRef","Typography","cursor","onClick","FileList","_useContext","useContext","AppContext","esIndex","_useState3","_useState4","setFiles","loadFiles","_ref4","FileList_regeneratorRuntime","doesIndexExist","t0","sent","search","query","match_all","aggs","multi_terms","terms","field","aggregations","buckets","_ref5","newName","updateOperation","script","source","lang","term","updateByQuery","_x","_x2","FileList_FileListRenderer","FileProcessorProgressTracker","processor","children","setProgress","process","cancel","FileProgress","Paper","padding","margin","fontSize","overflow","textOverflow","LinearProgress","variant","FileDropZoneRenderer","dropHandler","processors","Fragment","onDrop","onDragOver","ev","preventDefault","idx","dropzone_FileProcessorProgressTracker","dropzone_FileProgress","FileDropZone","processorFactory","processorCompleted","setProcessors","filter","handleLogFile","FileDropZone_regeneratorRuntime","newProcessors","toConsumableArray","handleFile","endsWith","JSZip","loadAsync","then","zip","relativePath","zipEntry","async","blob","File","replaceAll","error","_callee3","i","_i","_context3","dataTransfer","items","kind","getAsFile","_x3","FileDropZone_FileDropZoneRenderer","IndexSelector","setSelectedIndex","_React$useState","React","_React$useState2","indexNames","setIndexNames","createFilterOptions","loadIndexNames","IndexSelector_regeneratorRuntime","indices","getIndices","title","Autocomplete","event","newValue","inputValue","filterOptions","options","params","filtered","isExisting","some","option","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","renderOption","props","m","mt","freeSolo","renderInput","assign","label","Drawer","drawerOpen","toggleDrawer","minWidth","maxWidth","justifyContent","IconButton","ChevronLeft","ChevronRight","minHeight","drawer_IndexSelector","dropzone_FileDropZone","drawer_FileList","LineList","_ref$searchText","searchText","_ref$lineNumber","setLines","loadLines","LineList_regeneratorRuntime","query_string","_source","sort","order","highlight","highlight_query","simple_query_string","fields","rawline","number_of_fragments","hits","leadingBlankspaces","maybeBlankspaces","objectSpread","& em","background","& pre","style","parts","startsWith","partsComps","part","react","toFormattedLine","EntryFinder","loading","setLoading","setSearchText","_useState5","_useState6","advanced","setAdvanced","_useState7","_useState8","deduplicate","setDeduplicate","_useState9","_useState10","stackTrace","setStackTrace","_useState11","_useState12","searchTimeout","setSearchTimeout","_useState13","_useState14","data","setData","_useState15","_useState16","selectedRow","setSelectedRow","theme","useTheme","loadData","must","bool","should","default_field","doSearch","EntryFinder_regeneratorRuntime","mergeProperties","md5","first_doc","top_hits","bucket","doc_count","handleSelectRow","row","isSelRow","isSelEntry","width","zIndex","position","right","top","height","CircularProgress","color","alignItems","text","clearTimeout","autoComplete","Tooltip","icon","icons_material","checkedIcon","TableContainer","component","maxHeight","Table","TableHead","TableRow","TableCell","border","TableBody","& td","& td, & th","backgroundColor","palette","grey","loglevel","Divider","lineHeight","logviewer_LineList","Main","pt","drawer_Drawer","logviewer_EntryFinder","Preferences","esURL","testESConnection","esConnected","themeMode","toggleThemeMode","tempURL","setTempURL","esIndices","setESIndices","handleDeleteIndices","Layout_regeneratorRuntime","deleteIndices","FormControl","FormLabel","FormGroup","helperText","url","disabled","AutoDelete","FormControlLabel","control","SettingsButton","navigate","useNavigate","Settings_default","HomeButton","Psychology","Layout","_useContext2","CssBaseline","AppBar","Toolbar","Layout_HomeButton","noWrap","href","mr","fontFamily","fontWeight","letterSpacing","textDecoration","ml","Layout_SettingsButton","react_router","path","element","Layout_Preferences","Layout_Main","createContext","App","localStorage","getItem","state","setState","defaultHeaders","Content-Type","prefixIndex","elastic_regeneratorRuntime","fetch","method","headers","ok","json","payload","body","createAndConfigureIndex","_callee4","response","_context4","_x4","_callee5","jsonResponse","_context5","Array","isArray","errors","_x5","_x6","canConnect","_ref6","_callee6","_context6","_x7","_ref7","_callee7","prefix","_context7","_x8","_ref8","_callee8","_context8","_x9","_x10","esStoreFactory","darkTheme","createTheme","mode","isValidHttpUrl","string","URL","_","protocol","App_regeneratorRuntime","setItem","Provider","s","ThemeProvider","react_router_dom","basename","components_Layout","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.a4b59083.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { MD5 } from 'crypto-js';\n\n// TODO Ideally this would be called from a web worker\n// TODO These should be configurable and reside outside of this file\nconst LOG_ENTRY_REGEX_NUIX =\n    /^(\\d{4}-\\d{2}-\\d{2}.\\d{2}:\\d{2}:\\d{2}.\\d{3} .\\d{4}) \\[.*?] \\d*? ([A-Z]+?) .*? - (.*)/;\nconst LOG_ENTRY_REGEX_ES =\n    /^\\[(\\d{4}-\\d{2}-\\d{2}.\\d{2}:\\d{2}:\\d{2}).\\d{3}]\\[\\w{4}.]\\[.*?].*?].(.*)/;\nconst LOG_ENTRY_REGEX_GENERIC =\n    /^.*?(\\d{4}-\\d{2}-\\d{2}.\\d{2}:\\d{2}:\\d{2}).*?(DEBUG|WARN|INFO|ERROR)(.*)/;\nconst STACK_TRACE_REGEX = /^\\s*?at \\w+\\.?\\$?.+:\\d+\\).*/;\n\nexport class LoadFileToESProcessor {\n    constructor(\n        esStore,\n        indexName,\n        file,\n        progressCallback,\n        completionCallback,\n        esBatchSize = 10000\n    ) {\n        this.indexName = indexName;\n        this.file = file;\n        this.progressCallback = progressCallback; // Called for each line read\n        this.completionCallback = completionCallback; // Called when progress = 100\n        this.progress = 0;\n        this.cancelled = false; // If it was cancelled by the user\n        this.esStore = esStore;\n        this.esBatchSize = esBatchSize; // Max size of the currentBatch before it is flushed\n\n        this.currentBatch = []; // Batch of documents to be indexed/updated before it is flushed\n        this.fileGuid = uuidv4(); // Unique GUID assigned to the file\n        this.fileName = file.name;\n\n        this.entryGuid = null; // The GUID of the line that is the first of a multi-line entry\n        this.entryDocIds = []; // GUIDs of the lines that are part of the same entry\n\n        // While we add line by line, there is information line the flags and MD5 that we can only calculate per entry. These are kere\n        // and updated via updateCurrentEntryAndStartNew()\n        this.entryContent = []; // Content of the entry while we read it from multiple lines (so we can get the MD5)\n        this.entryFlags = []; // Flags to be added to the entry\n\n        this.matcher = null; // Matcher used for this file\n\n        this.logEntriesAdded = 0;\n    }\n\n    process() {\n        if (this.processCalled) {\n            return;\n        }\n        this.processCalled = true; // Don't process 2X\n\n        console.debug(\n            `Processing ${this.file.name} with size ${this.file.size}`\n        );\n\n        let reader = new FileReader();\n        reader.onload = this.handleOnLoad(reader);\n        reader.readAsText(this.file);\n    }\n\n    matchesNewEntry = (line) => {\n        if (this.matcher) {\n            return line.match(this.matcher);\n        }\n\n        // Matcher is not known yet\n        let result = line.match(LOG_ENTRY_REGEX_NUIX);\n        if (result) {\n            this.matcher = LOG_ENTRY_REGEX_NUIX;\n            this.matcherName = 'format-nuix';\n        } else if ((result = line.match(LOG_ENTRY_REGEX_ES))) {\n            this.matcher = LOG_ENTRY_REGEX_ES;\n            this.matcherName = 'format-es';\n        } else if ((result = line.match(LOG_ENTRY_REGEX_GENERIC))) {\n            this.matcher = LOG_ENTRY_REGEX_GENERIC;\n            this.matcherName = 'format-generic';\n        }\n\n        if (this.matcherName) {\n            console.info('Detected format: ' + this.matcherName);\n        }\n\n        return result;\n    };\n\n    handleOnLoad = (reader) => async () => {\n        try {\n            const fileGuid = this.fileGuid;\n            const fileName = this.fileName;\n\n            let lines = reader.result.split('\\n');\n\n            let timestamp, logLevel; // We replicate the timestamp and logLevel for multi-line entries\n            for (var lineNumber = 0; lineNumber < lines.length; lineNumber++) {\n                if (this.cancelled) {\n                    console.warn('Process cancelled');\n                    break;\n                }\n\n                const line = lines[lineNumber];\n                const docId = `${fileGuid}-${lineNumber}`;\n\n                let newLineDoc = {\n                    fileguid: fileGuid,\n                    filename: fileName,\n                    type: 'line',\n                    linenumber: lineNumber + 1,\n                };\n\n                const match = this.matchesNewEntry(line);\n                const newEntry = match && match.length > 0;\n                let content = null;\n                if (newEntry) {\n                    timestamp = match[1];\n                    logLevel = match[2];\n                    content = match[3] ? match[3].trim() : match[3];\n\n                    this.updateCurrentEntryAndStartNew();\n                    this.entryFlags.push(this.matcherName);\n                } else if (!timestamp) {\n                    // We haven't read any successful entry yet\n                    console.warn(\n                        'Skipping leading invalid log entry: ' +\n                            lineNumber +\n                            ' - ' +\n                            line\n                    );\n                    continue;\n                }\n\n                newLineDoc['timestamp'] = new Date(timestamp).toISOString();\n                newLineDoc['loglevel'] = logLevel;\n                newLineDoc['content'] = content || line;\n                newLineDoc['rawline'] = line;\n\n                // Keep track so we can get the MD5\n                this.entryContent.push(content || line);\n                this.entryDocIds.push(docId);\n\n                // Mark the entire entry as a stack trace if it matches the regex\n                if (\n                    !!line.match(STACK_TRACE_REGEX) &&\n                    !this.entryFlags.includes('stacktrace')\n                ) {\n                    this.entryFlags.push('stacktrace');\n                }\n\n                this.addIndexOperation(docId, newLineDoc);\n\n                if (this.currentBatch.length === this.esBatchSize) {\n                    await this.flush();\n                }\n\n                this.reportProgress((lineNumber * 100) / lines.length);\n            }\n\n            this.updateCurrentEntryAndStartNew();\n        } finally {\n            await this.flush();\n            this.reportProgress(100);\n        }\n    };\n\n    async flush() {\n        if (this.currentBatch.length === 0) {\n            return;\n        }\n        console.debug('Flushing: ' + this.currentBatch.length);\n        await this.esStore.postToIndex(this.indexName, this.currentBatch);\n        await new Promise((r) => setTimeout(r, 5)); // Give the UI some time to update when flushing\n        this.currentBatch = [];\n    }\n\n    // Called when we have a new entry or finished the file, so we know the stack is complete\n    // if we were in the process of capturing one.\n    updateCurrentEntryAndStartNew() {\n        if (this.entryDocIds.length === 0) {\n            // First entry?\n            return;\n        }\n\n        const entryMD5 = MD5(this.entryContent.join('\\n')).toString();\n\n        this.logEntriesAdded++;\n\n        // Add updates to all docs to add the relevant fields\n        this.entryDocIds.forEach((e) => {\n            this.addUpdateOperation(e, {\n                doc: {\n                    entryfirstline: this.logEntriesAdded,\n                    entrymd5: entryMD5,\n                    flags: this.entryFlags,\n                },\n            });\n        });\n\n        this.entryDocIds = [];\n        this.entryContent = [];\n        this.entryFlags = [];\n    }\n\n    addIndexOperation(id, o) {\n        this.currentBatch.push(\n            JSON.stringify({\n                index: {\n                    _index: this.indexName,\n                    _id: id,\n                },\n            }),\n            JSON.stringify(o)\n        );\n    }\n\n    addUpdateOperation(id, o) {\n        this.currentBatch.push(\n            JSON.stringify({\n                update: {\n                    _index: this.indexName,\n                    _id: id,\n                },\n            }),\n            JSON.stringify(o)\n        );\n    }\n\n    reportProgress(progress) {\n        this.progress = progress;\n        this.progressCallback && this.progressCallback(progress);\n\n        if (progress === 100) {\n            this.completionCallback && this.completionCallback(this);\n        }\n    }\n\n    cancel() {\n        this.cancelled = true;\n    }\n}\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { AppContext } from '../../App';\nimport {\n    Box,\n    Checkbox,\n    List,\n    ListItem,\n    TextField,\n    Typography,\n} from '../../../node_modules/@mui/material/index';\n\nconst FileListRenderer = ({ files, selectedFiles, toggleFile, renameFile }) => {\n    const [editing, setEditing] = useState();\n    const textBoxRef = useRef();\n\n    const handleEdit = (guid) => () => {\n        setEditing(guid);\n    };\n\n    const handleSave = (guid) => (evt) => {\n        renameFile(guid, evt.target.value);\n        setEditing(null);\n    };\n\n    useEffect(() => {\n        if (textBoxRef.current) {\n            textBoxRef.current.focus();\n            textBoxRef.current.select();\n        }\n    });\n\n    return (\n        <Box\n            id='root-file-list'\n            sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                flex: 1,\n                overflowY: 'scroll',\n            }}>\n            <List>\n                {files &&\n                    files.map(([filename, fileguid]) => (\n                        <ListItem key={fileguid} sx={{ p: 0 }}>\n                            <Checkbox\n                                checked={\n                                    selectedFiles.length > 0 &&\n                                    selectedFiles.includes(fileguid)\n                                }\n                                onChange={() => toggleFile(fileguid)}\n                                size='small'\n                            />\n                            {editing === fileguid && (\n                                <TextField\n                                    defaultValue={filename}\n                                    onBlur={handleSave(fileguid)}\n                                    inputRef={textBoxRef}\n                                />\n                            )}\n                            {editing !== fileguid && (\n                                <Typography\n                                    sx={{ cursor: 'pointer' }}\n                                    onClick={handleEdit(fileguid)}>\n                                    {filename}\n                                </Typography>\n                            )}\n                        </ListItem>\n                    ))}\n            </List>\n        </Box>\n    );\n};\n\nconst FileList = () => {\n    const { esStore, esIndex, selectedFiles, toggleFile } =\n        useContext(AppContext);\n\n    const [files, setFiles] = useState([]);\n\n    const loadFiles = async () => {\n        let result =\n            (await esStore.doesIndexExist(esIndex)) &&\n            (await esStore.search(esIndex, {\n                query: {\n                    match_all: {},\n                },\n                aggs: {\n                    files: {\n                        multi_terms: {\n                            terms: [\n                                {\n                                    field: 'filename.keyword',\n                                },\n                                {\n                                    field: 'fileguid',\n                                },\n                            ],\n                            size: 100,\n                        },\n                    },\n                },\n                size: 0,\n            }));\n\n        setFiles(\n            result ? result.aggregations.files.buckets.map((e) => e.key) : []\n        );\n    };\n\n    const renameFile = async (guid, newName) => {\n        if (!guid || !newName || newName.length === 0) {\n            console.warn(\n                'Will not rename because either guid or name are empty'\n            );\n            return;\n        }\n\n        const updateOperation = {\n            script: {\n                source: `ctx._source.filename = '${newName}'`,\n                lang: 'painless',\n            },\n            query: {\n                term: {\n                    fileguid: guid,\n                },\n            },\n        };\n\n        await esStore.updateByQuery(esIndex, updateOperation);\n        loadFiles();\n    };\n\n    useEffect(() => {\n        loadFiles();\n    }, [selectedFiles, esIndex]);\n\n    return (\n        <FileListRenderer\n            files={files}\n            selectedFiles={selectedFiles}\n            toggleFile={toggleFile}\n            renameFile={renameFile}\n        />\n    );\n};\n\nexport default FileList;\n","import { useEffect, useState } from 'react';\n\nconst FileProcessorProgressTracker = ({ processor, children }) => {\n    const [progress, setProgress] = useState(0);\n\n    useEffect(() => {\n        processor.progressCallback = setProgress;\n        processor.process();\n        return () => {\n            processor.cancel();\n        };\n    }, []);\n\n    return children(processor.file.name, progress);\n};\n\nexport default FileProcessorProgressTracker;\n","import { LinearProgress, Paper, Typography } from '@mui/material';\nimport React from 'react';\n\nconst FileProgress = ({ fileName, progress }) => (\n    <Paper sx={{ padding: 1, margin: 1 }}>\n        <Typography fontSize={12} overflow='hidden' textOverflow='ellipsis'>\n            {fileName}\n        </Typography>\n        <LinearProgress variant='determinate' value={progress} />\n    </Paper>\n);\n\nexport default FileProgress;\n","import { Paper } from '@mui/material';\nimport React, { useState } from 'react';\nimport JSZip from 'jszip';\nimport FileProcessorProgressTracker from './FileProcessorProgressTracker';\nimport FileProgress from './FileProgress';\n\nconst FileDropZoneRenderer = ({ dropHandler, processors }) => (\n    <>\n        <Paper\n            id='drop_zone'\n            onDrop={dropHandler}\n            onDragOver={(ev) => ev.preventDefault()}\n            sx={{ padding: 2, margin: 1 }}>\n            <p>Drop Zone</p>\n        </Paper>\n        {processors.map((processor, idx) => (\n            <FileProcessorProgressTracker\n                key={`tracker${idx}`}\n                processor={processor}>\n                {(fileName, progress) => (\n                    <FileProgress fileName={fileName} progress={progress} />\n                )}\n            </FileProcessorProgressTracker>\n        ))}\n    </>\n);\n\nconst FileDropZone = ({ processorFactory, processorCompleted }) => {\n    const [processors, setProcessors] = useState([]);\n\n    const completionCallback = (processor) => {\n        console.debug('Processor completed: ' + processor.fileName);\n        setProcessors((p) => p.filter((e) => e.progress < 100)); // May come from different threads, so don't remove only the one in the param\n        processorCompleted && processorCompleted(processor);\n    };\n\n    const handleLogFile = async (file) => {\n        let newProcessors = [];\n        const processor = processorFactory(file);\n        processor.completionCallback = completionCallback;\n        newProcessors.push(processor);\n        setProcessors((p) => [...p, ...newProcessors]);\n    };\n\n    const handleFile = async (file) => {\n        const fileName = file.name;\n\n        if (fileName.endsWith('log')) {\n            handleLogFile(file);\n            return;\n        }\n\n        if (fileName.endsWith('zip')) {\n            JSZip.loadAsync(file).then(\n                function (zip) {\n                    zip.forEach((relativePath, zipEntry) => {\n                        if (\n                            relativePath.endsWith('.log') ||\n                            relativePath.endsWith('.zip')\n                        ) {\n                            zipEntry.async('blob').then((blob) => {\n                                handleFile(\n                                    new File(\n                                        [blob],\n                                        relativePath\n                                            .replaceAll('/', '_')\n                                            .replaceAll('\\\\', '_')\n                                    )\n                                );\n                            });\n                        } else {\n                            console.debug(\n                                `Skipped ${relativePath}/${zipEntry.name}`\n                            );\n                        }\n                    });\n                },\n                (e) => {\n                    console.error(e);\n                }\n            );\n        }\n\n        console.error('Skipping unsupported file type' + fileName);\n    };\n\n    const dropHandler = async (ev) => {\n        ev.preventDefault();\n\n        if (ev.dataTransfer.items) {\n            for (let i = 0; i < ev.dataTransfer.items.length; i++) {\n                if (ev.dataTransfer.items[i].kind === 'file') {\n                    handleFile(ev.dataTransfer.items[i].getAsFile());\n                }\n            }\n        } else {\n            for (let i = 0; i < ev.dataTransfer.files.length; i++) {\n                handleFile(ev.dataTransfer.files[i]);\n            }\n        }\n    };\n\n    return (\n        <FileDropZoneRenderer\n            processors={processors}\n            dropHandler={dropHandler}\n        />\n    );\n};\n\nexport default FileDropZone;\n","import { createFilterOptions } from '@mui/material/Autocomplete';\nimport React, { useContext, useEffect } from 'react';\nimport {\n    Autocomplete,\n    TextField,\n} from '../../../node_modules/@mui/material/index';\nimport { AppContext } from '../../App';\n\nconst IndexSelector = () => {\n    const { esStore, esIndex, setSelectedIndex } = useContext(AppContext);\n\n    const [indexNames, setIndexNames] = React.useState([]);\n\n    const filter = createFilterOptions();\n\n    const loadIndexNames = async () => {\n        const indices = await esStore.getIndices();\n        setIndexNames(\n            indices.map((e) => {\n                return { title: e.index };\n            })\n        );\n    };\n\n    useEffect(() => {\n        loadIndexNames();\n    }, []);\n\n    return (\n        <Autocomplete\n            value={esIndex}\n            onChange={(event, newValue) => {\n                const indexName =\n                    newValue &&\n                    (newValue.inputValue || newValue.title || newValue);\n                setSelectedIndex(indexName);\n            }}\n            filterOptions={(options, params) => {\n                const filtered = filter(options, params);\n\n                const { inputValue } = params;\n                // Suggest the creation of a new value\n                const isExisting = options.some(\n                    (option) => inputValue === option.title\n                );\n                if (inputValue !== '' && !isExisting) {\n                    filtered.push({\n                        inputValue,\n                        title: `Add \"${inputValue}\"`,\n                    });\n                }\n\n                return filtered;\n            }}\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            options={indexNames}\n            getOptionLabel={(option) => {\n                // Value selected with enter, right from the input\n                if (typeof option === 'string') {\n                    return option;\n                }\n                // Add \"xxx\" option created dynamically\n                if (option.inputValue) {\n                    return option.inputValue;\n                }\n                // Regular option\n                return option.title;\n            }}\n            renderOption={(props, option) => <li {...props}>{option.title}</li>}\n            sx={{ m: 1, mt: 2 }}\n            freeSolo\n            renderInput={(params) => (\n                <TextField {...params} label='Index name' />\n            )}\n        />\n    );\n};\n\nexport default IndexSelector;\n","import { ChevronLeft, ChevronRight } from '@mui/icons-material';\nimport React, { useContext } from 'react';\nimport { Box, IconButton } from '../../../node_modules/@mui/material/index';\nimport { AppContext } from '../../App';\nimport { LoadFileToESProcessor } from '../../processors/index';\nimport FileList from '../drawer/FileList';\nimport FileDropZone from './dropzone/FileDropZone';\nimport IndexSelector from './IndexSelector';\n\nconst Drawer = () => {\n    const { esStore, esIndex, toggleFile, drawerOpen, toggleDrawer } =\n        useContext(AppContext);\n\n    return (\n        <Box\n            id='root-drawer'\n            sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                flex: 1,\n                minWidth: drawerOpen ? '280px' : 0,\n                maxWidth: 300,\n            }}>\n            <Box\n                sx={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    justifyContent: 'flex-end',\n                    m: '5px',\n                }}>\n                <IconButton onClick={toggleDrawer}>\n                    {drawerOpen ? <ChevronLeft /> : <ChevronRight />}\n                </IconButton>\n            </Box>\n            {drawerOpen && (\n                <Box\n                    sx={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        flex: 1,\n                        minHeight: '100px',\n                    }}>\n                    <IndexSelector />\n\n                    <FileDropZone\n                        processorFactory={(file) =>\n                            new LoadFileToESProcessor(esStore, esIndex, file)\n                        }\n                        processorCompleted={(processor) =>\n                            toggleFile(processor.fileGuid)\n                        }\n                    />\n\n                    <FileList />\n                </Box>\n            )}\n        </Box>\n    );\n};\n\nexport default Drawer;\n","import React, { Fragment, useContext, useEffect, useState } from 'react';\nimport { Box } from '../../../node_modules/@mui/material/index';\nimport { AppContext } from '../../App';\n\nconst LineList = ({ searchText = '', fileGuid, lineNumber = 0 }) => {\n    const { esStore, esIndex } = useContext(AppContext);\n\n    const [lines, setLines] = useState([]);\n\n    const loadLines = async () => {\n        const result = await esStore.search(esIndex, {\n            query: {\n                query_string: {\n                    query: `fileguid: ${fileGuid} && linenumber:[${\n                        lineNumber - 5\n                    } TO ${lineNumber + 245}]`,\n                },\n            },\n            _source: ['linenumber', 'rawline'],\n            sort: [\n                {\n                    fileguid: {\n                        order: 'asc',\n                    },\n                },\n                {\n                    linenumber: {\n                        order: 'asc',\n                    },\n                },\n            ],\n            highlight: {\n                highlight_query: {\n                    simple_query_string: {\n                        query: searchText,\n                        fields: ['rawline'],\n                    },\n                },\n                fields: {\n                    rawline: {\n                        number_of_fragments: 0,\n                    },\n                },\n            },\n            size: 250,\n        });\n\n        setLines(\n            result.hits.hits.map((e) => {\n                // ES trims highlight results. We just want to keep the leading ones because of stack traces (\\tat...)\n                const leadingBlankspaces = e._source.rawline.match(/^(\\s+)/);\n                const maybeBlankspaces = leadingBlankspaces\n                    ? leadingBlankspaces[0]\n                    : null;\n\n                return e.highlight\n                    ? {\n                          ...e._source,\n                          rawline: maybeBlankspaces + e.highlight.rawline[0],\n                      }\n                    : e._source;\n            })\n        );\n    };\n\n    const toFormattedLine = (line) => {\n        const parts = line.rawline.split(/<.?em>/);\n        const startsWith = line.rawline.startsWith('<em>');\n        const partsComps = [];\n\n        parts.forEach((part, idx) => {\n            if (startsWith && idx % 2 === 0) {\n                partsComps.push(\n                    <em key={`${line.linenumber}-${idx}`}>{part}</em>\n                );\n            } else if (idx % 2 === 1) {\n                partsComps.push(\n                    <em key={`${line.linenumber}-${idx}`}>{part}</em>\n                );\n            } else {\n                partsComps.push(\n                    <pre key={`${line.linenumber}-${idx}`}>{part}</pre>\n                );\n            }\n        });\n\n        if (line.linenumber === lineNumber) {\n            return (\n                <span\n                    style={{ background: 'lightslategray' }}\n                    key={`${fileGuid}-${line.linenumber}`}>\n                    {partsComps}\n                    <br />\n                </span>\n            );\n        }\n\n        return (\n            <Fragment key={`${fileGuid}-${line.linenumber}`}>\n                {partsComps}\n                <br />\n            </Fragment>\n        );\n    };\n\n    useEffect(() => {\n        loadLines();\n    }, [fileGuid, lineNumber, searchText]);\n\n    return (\n        <Box\n            sx={{\n                '& em': { background: 'darkcyan' },\n                '& pre': { display: 'inline' },\n            }}>\n            <pre style={{ fontSize: '0.75em' }}>\n                {lines.map((line) => toFormattedLine(line))}\n            </pre>\n        </Box>\n    );\n};\n\nexport default LineList;\n","import { useTheme } from '@mui/material/styles';\nimport React, { useContext, useState, useEffect } from 'react';\nimport {\n    AdminPanelSettings,\n    AdminPanelSettingsOutlined,\n    ContentCopy,\n    ContentCopyOutlined,\n    TableRows,\n    TableRowsOutlined,\n} from '../../../node_modules/@mui/icons-material/index';\nimport {\n    Box,\n    Checkbox,\n    CircularProgress,\n    Divider,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    Tooltip,\n    Typography,\n} from '../../../node_modules/@mui/material/index';\nimport { AppContext } from '../../App';\nimport LineList from './LineList';\n\n// TODO: Break this massive component down\nconst EntryFinder = () => {\n    const { esStore, esIndex, selectedFiles } = useContext(AppContext);\n\n    const [loading, setLoading] = useState(true); // If data is loading\n    const [searchText, setSearchText] = useState(); // Text typed by the user\n    const [advanced, setAdvanced] = useState(false); // Advanced mode\n    const [deduplicate, setDeduplicate] = useState(false); // If we should deduplicate entries\n    const [stackTrace, setStackTrace] = useState(false); // Filter only for stack traces\n    const [searchTimeout, setSearchTimeout] = useState(); // Used to delay the search as the user types\n    const [data, setData] = useState([]); // The rows TODO: Rename\n    const [selectedRow, setSelectedRow] = useState(); // The selected row\n\n    const theme = useTheme();\n\n    useEffect(() => {\n        loadData();\n    }, [deduplicate, stackTrace, searchText, selectedFiles, esIndex]);\n\n    // ********** Queries\n\n    // Query built using the selected options and typed search, with an optional aggregation\n    const query = (aggs) => {\n        const filter = [];\n        const must = [];\n\n        if (stackTrace) {\n            filter.push({\n                term: {\n                    flags: 'stacktrace',\n                },\n            });\n        }\n\n        if (selectedFiles && selectedFiles.length > 0) {\n            const terms = selectedFiles.map((e) => ({\n                term: { fileguid: { value: e } },\n            }));\n\n            filter.push({\n                bool: {\n                    should: terms,\n                },\n            });\n        }\n\n        if (searchText && searchText.length > 0) {\n            if (advanced) {\n                must.push({\n                    query_string: {\n                        query: searchText,\n                        default_field: 'content',\n                    },\n                });\n            } else {\n                must.push({\n                    simple_query_string: {\n                        query: searchText,\n                        fields: ['content'],\n                    },\n                });\n            }\n        }\n\n        return {\n            query: {\n                bool: {\n                    filter,\n                    must,\n                },\n            },\n            _source: [\n                'fileguid',\n                'filename',\n                'entryfirstline',\n                'linenumber',\n                'timestamp',\n                'loglevel',\n                'content',\n                'flags',\n            ],\n            sort: [\n                {\n                    fileguid: {\n                        order: 'asc',\n                    },\n                },\n                {\n                    linenumber: {\n                        order: 'asc',\n                    },\n                },\n            ],\n            aggs: aggs ? aggs : {},\n            size: 1000,\n        };\n    };\n\n    // Just the aggregation that can be combined with query(^) above\n    const dedupEntriesAgg = () => {\n        return {\n            md5: {\n                terms: {\n                    field: 'entrymd5',\n                    size: 1000,\n                },\n                aggs: {\n                    first_doc: {\n                        top_hits: {\n                            _source: {\n                                includes: [\n                                    'fileguid',\n                                    'filename',\n                                    'entryfirstline',\n                                    'linenumber',\n                                    'timestamp',\n                                    'loglevel',\n                                    'content',\n                                    'flags',\n                                ],\n                            },\n                            size: 1,\n                        },\n                    },\n                },\n            },\n        };\n    };\n\n    // ********* Methods\n\n    // Performs the actual search\n    const doSearch = async () => {\n        let result;\n        if (deduplicate) {\n            result = await esStore.search(esIndex, query(dedupEntriesAgg()));\n        } else {\n            result = await esStore.search(esIndex, query());\n        }\n\n        if (result.aggregations) {\n            const mergeProperties = (bucket) => {\n                const result = bucket.first_doc.hits.hits[0]._source;\n                return { ...result, doc_count: bucket.doc_count };\n            };\n            setData(\n                result.aggregations.md5.buckets.map((e) => mergeProperties(e))\n            );\n        } else if (result.hits && result.hits) {\n            setData(result.hits.hits.map((e) => e._source));\n        } else {\n            setData([]);\n        }\n        setLoading(false);\n        setSelectedRow(null);\n    };\n\n    // Marks the data as being loaded and calls the async search\n    const loadData = async () => {\n        setLoading(true);\n        doSearch();\n    };\n\n    // Marks the row as selected and makes sure the row is visible\n    const handleSelectRow = (row, idx) => () => {\n        setSelectedRow(row);\n    };\n\n    // Helpers to check if the row/entry is selected based on the row\n    const isSelRow = (row) =>\n        selectedRow &&\n        row.fileguid === selectedRow.fileguid &&\n        row.linenumber === selectedRow.linenumber;\n    const isSelEntry = (row) =>\n        selectedRow &&\n        row.fileguid === selectedRow.fileguid &&\n        row.entryfirstline === selectedRow.entryfirstline;\n\n    // Triggers the search after 500ms\n    const delayedSearch = (text) => {\n        if (searchTimeout) {\n            clearTimeout(searchTimeout);\n        }\n\n        setSearchTimeout(setTimeout(() => setSearchText(text), 500));\n        setLoading(true);\n    };\n\n    return (\n        <Box\n            id='entry-finder-root'\n            sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                width: 0,\n                flex: 1,\n                p: '10px',\n            }}>\n            {loading && (\n                <Box\n                    sx={{\n                        zIndex: 2000,\n                        position: 'absolute',\n                        right: '50%',\n                        top: '20px',\n                        width: '25px',\n                        height: '25px',\n                    }}>\n                    <CircularProgress sx={{ color: 'white' }} size='1rem' />\n                </Box>\n            )}\n            <Box\n                sx={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                }}>\n                <TextField\n                    label='Search...'\n                    type='search'\n                    sx={{ flex: 1, p: '0 5px 0' }}\n                    onChange={(e) => delayedSearch(e.target.value)}\n                    autoComplete='off'\n                />\n                <Tooltip title='Advanced'>\n                    <Checkbox\n                        icon={<AdminPanelSettingsOutlined />}\n                        checkedIcon={<AdminPanelSettings />}\n                        checked={advanced}\n                        onChange={(e) => setAdvanced(e.target.checked)}\n                        sx={{ height: 'fit-content' }}\n                    />\n                </Tooltip>\n                <Tooltip title='Deduplicate'>\n                    <Checkbox\n                        icon={<ContentCopyOutlined />}\n                        checkedIcon={<ContentCopy />}\n                        checked={deduplicate}\n                        onChange={(e) => setDeduplicate(e.target.checked)}\n                        sx={{ height: 'fit-content' }}\n                    />\n                </Tooltip>\n                <Tooltip title='Stacktrace only'>\n                    <Checkbox\n                        icon={<TableRowsOutlined />}\n                        checkedIcon={<TableRows />}\n                        checked={stackTrace}\n                        onChange={(e) => setStackTrace(e.target.checked)}\n                        sx={{ height: 'fit-content' }}\n                    />\n                </Tooltip>\n            </Box>\n            <Paper\n                id='root-table'\n                sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    p: '5px',\n                    m: '10px 0',\n                    height: '400px',\n                    flex: 1,\n                }}>\n                {!loading && data.length === 0 && (\n                    <Typography>Nothing to see here...</Typography>\n                )}\n                {data.length > 0 && (\n                    <TableContainer\n                        id='root-table-container'\n                        component={Paper}\n                        sx={{ maxHeight: selectedRow ? '30%' : null }}>\n                        <Table size='small'>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell style={{ border: 0 }}>\n                                        <Typography>\n                                            {data.length >= 1000\n                                                ? '1000+'\n                                                : data.length}{' '}\n                                            results\n                                        </Typography>\n                                    </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody\n                                sx={{\n                                    '& td': { padding: '2px' },\n                                    '& pre': {\n                                        padding: 0,\n                                        margin: 0,\n                                        fontSize: '0.75em',\n                                    },\n                                }}>\n                                {data.map((row, idx) => (\n                                    <TableRow\n                                        key={`${row.fileguid}-${row.linenumber}`}\n                                        sx={{\n                                            '& td, & th': {\n                                                backgroundColor: isSelRow(row)\n                                                    ? theme.palette.grey['500']\n                                                    : isSelEntry(row)\n                                                    ? theme.palette.grey['400']\n                                                    : null,\n                                            },\n                                        }}\n                                        onClick={handleSelectRow(row, idx)}>\n                                        <TableCell>\n                                            <pre>{row.timestamp}</pre>\n                                        </TableCell>\n                                        <TableCell>\n                                            <pre>{row.loglevel}</pre>\n                                        </TableCell>\n                                        <TableCell sx={{ width: '100%' }}>\n                                            <pre>{row.content}</pre>\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                )}\n                <Divider sx={{ m: '5px 0' }} />\n                {selectedRow && (\n                    <Box\n                        sx={{\n                            flex: 1,\n                            width: '100%',\n                            overflow: 'scroll',\n                            p: '5px',\n                            lineHeight: 1,\n                        }}>\n                        <LineList\n                            searchText={searchText}\n                            fileGuid={selectedRow.fileguid}\n                            lineNumber={selectedRow.linenumber}\n                        />\n                    </Box>\n                )}\n            </Paper>\n        </Box>\n    );\n};\n\nexport default EntryFinder;\n","import { AppBar, Box, Toolbar, Typography } from '@mui/material';\nimport { AutoDelete, Psychology } from '@mui/icons-material';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport {\n    Checkbox,\n    CssBaseline,\n    FormControl,\n    FormControlLabel,\n    FormGroup,\n    FormLabel,\n    IconButton,\n    TextField,\n} from '@mui/material';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom/index';\nimport { AppContext } from '../App';\nimport Drawer from './drawer/Drawer';\nimport EntryFinder from './logviewer/EntryFinder';\n\nconst Main = () => {\n    return (\n        <Box\n            id='main-root'\n            component='div'\n            sx={{ display: 'flex', flex: 1, pt: '65px' }}>\n            <Box sx={{ display: 'flex' }}>\n                <Drawer />\n            </Box>\n            <Box id='xpto' sx={{ display: 'flex', flex: 1 }}>\n                <EntryFinder />\n            </Box>\n        </Box>\n    );\n};\n\nconst Preferences = () => {\n    const {\n        esStore,\n        esURL,\n        testESConnection,\n        esConnected,\n        themeMode,\n        toggleThemeMode,\n    } = useContext(AppContext);\n    const [tempURL, setTempURL] = useState(esURL ? esURL : '');\n    const [esIndices, setESIndices] = useState('mvk-*');\n\n    const handleOnChangeESURL = (ev) => {\n        const url = ev.target.value;\n        testESConnection(url);\n        setTempURL(url);\n    };\n\n    const handleDeleteIndices = async () => {\n        esStore.deleteIndices(esIndices);\n    };\n\n    return (\n        <Box\n            id='preferences-root'\n            component='div'\n            sx={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                flexDirection: 'column',\n                pt: '65px',\n                flex: 1,\n            }}>\n            <FormControl\n                sx={{ m: 3 }}\n                component='fieldset'\n                variant='standard'\n                style={{ padding: '25px 0', width: 450 }}>\n                <FormLabel component='legend'>Elasticsearch settings</FormLabel>\n                <FormGroup>\n                    <TextField\n                        label='URL'\n                        error={!esConnected}\n                        helperText={`Enter a valid ES URL (last valid: ${\n                            esURL ? esURL : '-'\n                        })`}\n                        value={tempURL}\n                        onChange={handleOnChangeESURL}\n                    />\n                    <Box sx={{ display: 'flex', mt: '15px' }}>\n                        <TextField\n                            label='Remove these indices'\n                            helperText=\"No confirmation. We're adults.\"\n                            value={esIndices}\n                            onChange={(e) => setESIndices(e.target.value)}\n                            sx={{ flex: 1 }}\n                        />\n                        <IconButton\n                            onClick={handleDeleteIndices}\n                            sx={{ height: 'fit-content', m: '10px 0 0 5px' }}\n                            disabled={!esConnected}>\n                            <AutoDelete />\n                        </IconButton>\n                    </Box>\n                </FormGroup>\n            </FormControl>\n            <FormControl\n                sx={{ m: 3 }}\n                component='fieldset'\n                variant='standard'\n                style={{ padding: '5px 0', width: 450 }}>\n                <FormLabel component='legend'>Other stuff</FormLabel>\n                <FormGroup>\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={themeMode === 'dark'}\n                                onChange={toggleThemeMode}\n                                name='themeMode'\n                            />\n                        }\n                        label='Dark Theme'\n                    />\n                </FormGroup>\n            </FormControl>\n        </Box>\n    );\n};\n\nconst SettingsButton = () => {\n    const navigate = useNavigate();\n\n    return (\n        <IconButton onClick={() => navigate('/preferences')}>\n            <SettingsIcon />\n        </IconButton>\n    );\n};\n\nconst HomeButton = () => {\n    const navigate = useNavigate();\n\n    return (\n        <IconButton onClick={() => navigate('/')}>\n            <Psychology />\n        </IconButton>\n    );\n};\n\nconst Layout = () => {\n    const navigate = useNavigate();\n    const { esConnected, esURL } = useContext(AppContext);\n\n    useEffect(() => {\n        if (!esURL) {\n            navigate('/preferences');\n        }\n    }, [esURL]);\n\n    return (\n        <Box\n            id='layout-root'\n            sx={{ display: 'flex', height: 'inherit', width: 'inherit' }}>\n            <CssBaseline />\n            <AppBar>\n                <Toolbar>\n                    <HomeButton />\n                    <Typography\n                        variant='h6'\n                        noWrap\n                        component='div'\n                        href='/'\n                        sx={{\n                            mr: 2,\n                            fontFamily: 'monospace',\n                            fontWeight: 700,\n                            letterSpacing: '.3rem',\n                            color: 'inherit',\n                            textDecoration: 'none',\n                            ml: 2,\n                            width: '100%',\n                        }}>\n                        LOGUEI\n                    </Typography>\n                    <SettingsButton />\n                </Toolbar>\n            </AppBar>\n            <Routes>\n                <Route path='/preferences' element={<Preferences />} />\n                <Route\n                    path='/'\n                    element={\n                        esConnected ? (\n                            <Main />\n                        ) : (\n                            <Typography\n                                sx={{\n                                    display: 'flex',\n                                    flex: 1,\n                                    justifyContent: 'center',\n                                    alignItems: 'center',\n                                }}>\n                                ES not connected\n                            </Typography>\n                        )\n                    }\n                />\n            </Routes>\n        </Box>\n    );\n};\n\nexport default Layout;\n","const INDEX_PREFIX = 'mvk-';\n\nconst esStore = (esURL) => {\n    const defaultHeaders = {\n        'Content-Type': 'application/json',\n    };\n\n    // TODO: Yes, I know... Handle errors :/\n    const prefixIndex = (index) => {\n        if (!index.startsWith(INDEX_PREFIX)) {\n            return INDEX_PREFIX + index;\n        }\n\n        return index;\n    };\n\n    const getIndices = async () => {\n        const result = await fetch(\n            `${esURL}/_cat/indices/${INDEX_PREFIX}*?s=index:asc&format=json`,\n            {\n                method: 'GET',\n                headers: defaultHeaders,\n            }\n        );\n\n        if (result.ok) {\n            return result.json();\n        }\n\n        console.error(result);\n\n        return [];\n    };\n\n    const search = async (index, payload) => {\n        index = prefixIndex(index);\n\n        const result = await fetch(`${esURL}/${index}/_search`, {\n            method: 'POST',\n            headers: defaultHeaders,\n            body: JSON.stringify(payload),\n        });\n\n        if (result.ok) {\n            return result.json();\n        }\n\n        console.error(result);\n\n        return {};\n    };\n\n    const createAndConfigureIndex = async (index) => {\n        index = prefixIndex(index);\n\n        const result = await fetch(`${esURL}/${index}`, {\n            method: 'PUT',\n            headers: defaultHeaders,\n            body: `\n                {\n                    \"settings\": {\n                        \"analysis\": {\n                        \"analyzer\": {\n                            \"default\": {\n                            \"type\": \"simple\"\n                            }\n                        }\n                        }\n                    },\n                    \"mappings\": {\n                      \"properties\": {\n                        \"type\": { \"type\": \"keyword\" },\n                        \"parentguid\": { \"type\": \"keyword\" },\n                        \"fileguid\": { \"type\": \"keyword\" },\n                        \"filename\": { \n                            \"type\": \"text\",\n                            \"fields\": {\n                                \"keyword\": { \n                                    \"type\": \"keyword\"\n                                }\n                            }\n                        },\n                        \"linenumber\": { \"type\": \"long\" },\n                        \"entryfirstline\": { \"type\": \"long\" },\n                        \"entrymd5\": { \"type\": \"keyword\" },\n                        \"timestamp\": { \"type\": \"date\"},\n                        \"loglevel\": { \"type\": \"keyword\"},\n                        \"content\": { \"type\": \"text\" },\n                        \"rawline\": { \"type\": \"text\" },\n                        \"flags\": {\"type\": \"keyword\" }\n                      }\n                    }\n                  }\n                `,\n        });\n\n        if (!result.ok) {\n            console.error(result);\n        }\n    };\n\n    const doesIndexExist = async (index) => {\n        index = prefixIndex(index);\n\n        let response = await fetch(`${esURL}/_cat/indices/${index}`, {\n            method: 'GET',\n            headers: defaultHeaders,\n        });\n\n        return response.ok;\n    };\n\n    const postToIndex = async (index, doc) => {\n        index = prefixIndex(index);\n\n        if (!(await doesIndexExist(index))) {\n            await createAndConfigureIndex(index);\n        }\n\n        let response;\n        if (!Array.isArray(doc)) {\n            response = await fetch(`${esURL}/${index}/_doc?refresh=wait_for`, {\n                method: 'POST',\n                headers: defaultHeaders,\n                body: doc,\n            });\n        } else {\n            // Some manual bulk request\n            const body = doc.join(`\\n`) + '\\n';\n            response = await fetch(`${esURL}/${index}/_bulk?refresh=wait_for`, {\n                method: 'POST',\n                headers: defaultHeaders,\n                body,\n            });\n        }\n\n        if (!response || !response.ok) {\n            console.error(response);\n        } else {\n            const jsonResponse = await response.json();\n            if (jsonResponse.errors) {\n                console.error(jsonResponse);\n            }\n        }\n    };\n\n    const canConnect = async (url) => {\n        try {\n            let response = await fetch(`${url}/_cat/health`, {\n                method: 'GET',\n                headers: defaultHeaders,\n            });\n\n            return response.ok;\n        } catch {\n            return false;\n        }\n    };\n\n    const deleteIndices = async (prefix) => {\n        prefix = prefixIndex(prefix);\n\n        const result = await fetch(\n            `${esURL}/_cat/indices/${prefix}*?s=index:asc&format=json`,\n            {\n                method: 'GET',\n                headers: defaultHeaders,\n            }\n        );\n\n        (await result.json()).forEach((e) => {\n            console.warn(`Deleting: ` + e.index);\n            fetch(`${esURL}/${e.index}`, {\n                method: 'DELETE',\n                headers: defaultHeaders,\n            });\n        });\n    };\n\n    const updateByQuery = async (index, payload) => {\n        index = prefixIndex(index);\n\n        const response = await fetch(\n            `${esURL}/${index}/_update_by_query?refresh=true`,\n            {\n                method: 'POST',\n                headers: defaultHeaders,\n                body: JSON.stringify(payload),\n            }\n        );\n\n        return response.ok;\n    };\n\n    return {\n        createAndConfigureIndex,\n        doesIndexExist,\n        postToIndex,\n        search,\n        getIndices,\n        canConnect,\n        deleteIndices,\n        updateByQuery,\n    };\n};\n\nexport { esStore as esStoreFactory };\n","import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Layout from './components/Layout';\nimport { esStoreFactory } from './stores/elastic';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\nexport const AppContext = React.createContext({});\n\nconst App = () => {\n    const [state, setState] = useState({\n        esIndex: 'mvk-default',\n        selectedFiles: [],\n        esURL: localStorage.getItem('esURL'),\n        esConnected: false,\n        themeMode: localStorage.getItem('themeMode')\n            ? localStorage.getItem('themeMode')\n            : 'light',\n        drawerOpen: true,\n    });\n\n    const esStore = esStoreFactory(state.esURL);\n\n    const setSelectedIndex = (indexName) => {\n        if (indexName) {\n            setState({ ...state, esIndex: indexName });\n        }\n    };\n\n    const toggleThemeMode = () => {\n        setState((s) => {\n            const mode = s.themeMode === 'light' ? 'dark' : 'light';\n            localStorage.setItem('themeMode', mode);\n            return { ...state, themeMode: mode };\n        });\n    };\n\n    const toggleDrawer = () => {\n        setState((s) => {\n            return { ...state, drawerOpen: !s.drawerOpen };\n        });\n    };\n\n    const darkTheme = createTheme(\n        {\n            palette: {\n                mode: state.themeMode,\n            },\n        },\n        [state.themeMode]\n    );\n\n    const toggleFile = (file) => {\n        setState((s) => {\n            let { selectedFiles } = s;\n\n            if (selectedFiles.includes(file)) {\n                selectedFiles = selectedFiles.filter((e) => e !== file);\n            } else {\n                selectedFiles = [...selectedFiles, file];\n            }\n\n            return { ...state, selectedFiles };\n        });\n    };\n\n    const isValidHttpUrl = (string) => {\n        let url;\n\n        try {\n            url = new URL(string);\n        } catch (_) {\n            return false;\n        }\n\n        return url.protocol === 'http:' || url.protocol === 'https:';\n    };\n\n    const testESConnection = async (url) => {\n        if (isValidHttpUrl(url)) {\n            if (await esStore.canConnect(url)) {\n                setState({ ...state, esURL: url, esConnected: true });\n                localStorage.setItem('esURL', url);\n                console.debug('Connected to ES at: ' + url);\n            } else {\n                console.warn('Unable to connect to: ' + url);\n                setState({ ...state, esConnected: false });\n            }\n        } else {\n            console.debug('Invalid URL: ' + url);\n        }\n    };\n\n    useEffect(() => {\n        testESConnection(state.esURL);\n    }, []);\n\n    return (\n        <AppContext.Provider\n            value={{\n                esStore,\n                esIndex: state.esIndex,\n                setSelectedIndex,\n                selectedFiles: state.selectedFiles,\n                toggleFile,\n                esURL: state.esURL,\n                testESConnection,\n                esConnected: state.esConnected,\n                themeMode: state.themeMode,\n                toggleThemeMode,\n                drawerOpen: state.drawerOpen,\n                toggleDrawer,\n            }}>\n            <ThemeProvider theme={darkTheme}>\n                <Router basename='/maverick'>\n                    <Layout />\n                </Router>\n            </ThemeProvider>\n        </AppContext.Provider>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}